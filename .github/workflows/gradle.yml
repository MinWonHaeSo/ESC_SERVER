# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

# Repo Action 페이지에 나타날 이름
name: Spring Boot & Gradle CI/CD

# Event Trigger
# master branch에 push 또는 pull request가 발생할 경우 동작
# branch 단위 외에도, tag나 cron 식 등을 사용할 수 있음
on:
  push:
    branches: [ main, dev ]

jobs:
  build:
    # 실행 환경 지정
    runs-on: ubuntu-latest

    # Task의 sequence를 명시한다.
    steps:
      - uses: actions/checkout@v3

      # 환경변수 파일 생성
      - name: Generate Environment Variable File
        run: |
          cd ./src/main/resources
          echo "elasticsearch.url=$ES_URL" >> application.properties
          echo "elasticsearch.clusterName=$ES_CLUSTER_NAME" >> application.properties
          echo "scheduler.update.starAvg=$SCHEDULER_STAR_AVG" >> application.properties
          echo "scheduler.update.notification=$SCHEDULER_NOTIFICATION" >> application.properties
          echo "server.port=$SERVER_PORT" >> application.properties
          echo "spring.datasource.url=$DB_URL" >> application.properties
          echo "spring.datasource.username=$DB_USERNAME" >> application.properties
          echo "spring.datasource.password=$DB_PWD" >> application.properties
          echo "$REDIS_HOST"
          echo "spring.redis.host=$REDIS_HOST" >> application.properties
          echo "spring.redis.port=$REDIS_PORT" >> application.properties
          echo "spring.jwt.secret=$JWT_SECRET" >> application.properties
          echo "spring.mail.host=$MAIL_HOST" >> application.properties
          echo "spring.mail.port=$MAIL_PORT" >> application.properties
          echo "spring.mail.username=$MAIL_USERNAME" >> application.properties
          echo "spring.mail.password=$MAIL_PWD" >> application.properties
          echo "spring.security.oauth2.client.registration.google.client-id=$GOOGLE_CLIENT_ID" >> application.properties
          echo "spring.security.oauth2.client.registration.google.client-secret=$GOOGLE_CLIENT_SECRET" >> application.properties
          echo "spring.security.oauth2.client.registration.google.scope=$GOOGLE_SCOPE" >> application.properties
          echo "spring.security.oauth2.client.registration.naver.client-id=$NAVER_CLIENT_ID" >> application.properties
          echo "spring.security.oauth2.client.registration.naver.client-secret=$NAVER_CLIENT_SECRET" >> application.properties
          echo "spring.security.oauth2.client.registration.naver.scope=$NAVER_SCOPE" >> application.properties
          echo "spring.security.oauth2.client.registration.kakao.client-id=$KAKAO_CLIENT_ID" >> application.properties
          echo "spring.security.oauth2.client.registration.kakao.client-secret=$KAKAO_CLIENT_SECRET" >> application.properties
          echo "spring.security.oauth2.client.registration.kakao.scope=$KAKAO_SCOPE" >> application.properties
          echo "spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}" >> application.properties
          echo "spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}" >> application.properties
          echo "spring.security.oauth2.client.registration.google.scope=${GOOGLE_SCOPE}" >> application.properties
          echo "spring.security.oauth2.client.registration.naver.client-id=${NAVER_CLIENT_ID}" >> application.properties
          echo "spring.security.oauth2.client.registration.naver.client-secret=${NAVER_CLIENT_SECRET}" >> application.properties
          echo "spring.security.oauth2.client.registration.naver.scope=${NAVER_SCOPE}" >> application.properties
          echo "spring.security.oauth2.client.registration.naver.client-name=${NAVER_CLIENT_NAME}" >> application.properties
          echo "spring.security.oauth2.client.registration.naver.authorization-grant-type=${NAVER_GRANT_TYPE}" >> application.properties
          echo "spring.security.oauth2.client.registration.naver.redirect-uri=${NAVER_REDIRECT_URI}" >> application.properties
          echo "spring.security.oauth2.client.registration.kakao.authorization-grant-type=${KAKAO_GRANT_TYPE}" >> application.properties
          echo "spring.security.oauth2.client.registration.kakao.client-id=${KAKAO_CLIENT_ID}" >> application.properties
          echo "spring.security.oauth2.client.registration.kakao.client-secret=${KAKAO_CLIENT_SECRET}" >> application.properties
          echo "spring.security.oauth2.client.registration.kakao.redirect-uri=${KAKAO_REDIRECT_URI}" >> application.properties
          echo "spring.security.oauth2.client.registration.kakao.scope=${KAKAO_SCOPE}" >> application.properties
          echo "spring.security.oauth2.client.registration.kakao.client-authentication-method=${KAKAO_AUTH_METHOD}" >> application.properties
          echo "spring.security.oauth2.client.registration.kakao.client-name=${KAKAO_CLIENT_NAME}" >> application.properties
          echo "spring.security.oauth2.client.provider.naver.authorization-uri=${NAVER_AUTH_URI}" >> application.properties
          echo "spring.security.oauth2.client.provider.naver.token-uri=${NAVER_TOKEN_URI}" >> application.properties
          echo "spring.security.oauth2.client.provider.naver.user-info-uri=${NAVER_USER_INFO_URI}" >> application.properties
          echo "spring.security.oauth2.client.provider.naver.user-name-attribute=${NAVER_ATTRIBUTE}" >> application.properties
          echo "spring.security.oauth2.client.provider.kakao.authorization-uri=${KAKAO_AUTH_URI}" >> application.properties
          echo "spring.security.oauth2.client.provider.kakao.token-uri=${KAKAO_TOKEN_URI}" >> application.properties
          echo "spring.security.oauth2.client.provider.kakao.user-info-uri=${KAKAO_USER_INFO_URI}" >> application.properties
          echo "spring.security.oauth2.client.provider.kakao.user-name-attribute=${KAKAO_ATTRIBUTE}" >> application.properties
          echo "targetUrl.success=${TARGET_URL_SUCCESS}" >> application.properties
          echo "targetUrl.fail=${TARGET_URL_FAIL}" >> application.properties          

        env:
          ES_URL: ${{ secrets.ES_URL }}
          ES_CLUSTER_NAME: ${{ secrets.ES_CLUSTER_NAME }}
          SCHEDULER_STAR_AVG: ${{ secrets.SCHEDULER_STAR_AVG }}
          SCHEDULER_NOTIFICATION: ${{ secrets.SCHEDULER_NOTIFICATION }}
          SERVER_PORT: ${{ secrets.SERVER_PORT }}
          DB_URL: ${{ secrets.DB_URL }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PWD: ${{ secrets.DB_PWD }}
          REDIS_HOST: ${{ secrets.REDIS_HOST }}
          REDIS_PORT: ${{ secrets.REDIS_PORT }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          MAIL_HOST: ${{ secrets.MAIL_HOST }}
          MAIL_PORT: ${{ secrets.MAIL_PORT }}
          MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
          MAIL_PWD: ${{ secrets.MAIL_PWD }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          NAVER_CLIENT_ID: ${{ secrets.NAVER_CLIENT_ID }}
          NAVER_CLIENT_SECRET: ${{ secrets.NAVER_CLIENT_SECRET }}
          NAVER_REDIRECT_URI: ${{ secrets.NAVER_REDIRECT_URI }}
          KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
          KAKAO_CLIENT_SECRET: ${{ secrets.KAKAO_CLIENT_SECRET }}
          KAKAO_REDIRECT_URI: ${{ secrets.KAKAO_REDIRECT_URI }}
          TARGET_URL_SUCCESS: ${{ secrets.TARGET_URL_SUCCESS }}
          TARGET_URL_FAIL: ${{ secrets.TARGET_URL_FAIL }}

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Build
      - name: Build with Gradle
        run: ./gradlew clean build

      # 전송할 파일을 담을 디렉토리 생성
      - name: Make Directory for deliver
        run: mkdir deploy

      # Jar 파일 Copy
      - name: Copy Jar
        run: cp ./build/libs/*.jar ./deploy/

      # appspec.yml Copy
      - name: Copy appspec
        run: cp appspec.yml ./deploy/

      - name: Copy Start Script
        run: cp scripts/deploy.sh ./deploy/


      # 압축파일 형태로 전달
      - name: Make zip file
        run: zip -r -qq -j ./springboot-intro-build.zip ./deploy

      # S3 Bucket으로 copy
      - name: Deliver to AWS S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws s3 cp \
          --region ap-northeast-2 \
          --acl private \
          ./springboot-intro-build.zip s3://${{ secrets.AWS_S3_BUCKET_NAME }}/

      # Deploy
      - name: Deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws deploy create-deployment \
          --application-name esc-codedeploy \
          --deployment-group-name esc-code \
          --file-exists-behavior OVERWRITE \
          --s3-location bucket=${{ secrets.AWS_S3_BUCKET_NAME }},bundleType=zip,key=springboot-intro-build.zip \
          --region ap-northeast-2